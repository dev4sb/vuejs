import { gql } from '@apollo/client/core';
export const DEFAULT_QUERY = `
query collection($handle: String, $first: Int, $filters: [ProductFilter!]) {
  collection(handle: $handle) {
    id
    handle
    title
    description
    descriptionHtml
    updatedAt
    image {
      src
      url
    }
    products(filters: $filters, first: $first) {
      edges {
        node {
          images(first: 1) {
            edges {
              node {
                src
                originalSrc
                id
                height
                width
                altText
              }
            }
          }
          variants(first: 1) {
            edges {
              node {
                price
                availableForSale
                compareAtPrice
              }
            }
          }
          options {
            id
            name
            values
          }
          tags
          productType
          title
          vendor
          publishedAt
          createdAt
          updatedAt
          publishedAt
          id
          description
          descriptionHtml
          handle
        }
      }
    }
  }
}
`;
const PRICE_FILTER_RANGE = ['min', 'max'];
function convertFacetFiltersLocalToShopify(filters) {
    const result = {};
    for (const key of Object.keys(filters)) {
        // This condition will set the price range filter
        if (PRICE_FILTER_RANGE.includes(key)) {
            result.price = result.price ?
                { ...result.price, [key]: parseFloat(filters[key]) } :
                { [key]: parseFloat(filters[key]) };
        }
    }
    return result;
}
export default async function getCollection(context, params, customQuery) {
    const variables = {
        handle: params.categorySlug,
        first: params.perPage ?? 5,
        filters: convertFacetFiltersLocalToShopify(params.filters)
    };
    const { collection } = context.extendQuery(customQuery, {
        collection: {
            query: DEFAULT_QUERY,
            variables
        }
    });
    const response = await context.client.apolloClient.query({
        query: gql(collection.query),
        variables: collection.variables
    });
    return response ?? null;
}
//# sourceMappingURL=getCollection.js.map