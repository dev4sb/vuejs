'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core$1 = require('@vue-storefront/core');
var core = require('@apollo/client/core');
var graphql = require('graphql');
var shopifyApollo = require('@vue-storefront/shopify-apollo');

const getCountry = (context) => context.res.req.cookies['vsf-locale'] ? context.res.req.cookies['vsf-locale'] === "en" ? "US" : (context.res.req.cookies['vsf-locale']).toUpperCase() : "US";

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function getProduct(context, params, customQuery) {
    if (params.slug) {
        let chosenVariant = [];
        if (params.selectedOptions && Object.keys(params.selectedOptions).length > 0) {
            chosenVariant = Object.entries(params.selectedOptions).map(k => ({ name: k[0], value: k[1] }));
        }
        const DEFAULT_QUERY = `
    query product($handle: String!, $country: CountryCode!, $selectedOptions: [SelectedOptionInput!]! ) @inContext(country: $country ) {
      productByHandle(handle: $handle){
        id
        title
        description
        descriptionHtml
        handle
        tags
        availableForSale
        totalInventory
        vendor
        seo{
          title
          description
        }
        variantBySelectedOptions(selectedOptions:$selectedOptions){
          id
          title
          sku
          availableForSale
          quantityAvailable
          image{
            altText
            originalSrc
            transformedSrc
          }
          priceV2{
            currencyCode
            amount
          }
          compareAtPriceV2{
            currencyCode
            amount
          }
        }
        options{
          id
          name
          values
        }
        collections(first:250){
          edges{
            node{
              title
              handle
            }
          }
        }
        images(first:20){
          edges{
            node{
              id
              altText
              originalSrc
              transformedSrc
            }
          }
        }
        variants(first:20){
          edges{
            node{
              id
              title
              weight
              availableForSale
              sku
              priceV2{
                amount
                currencyCode
              }
              compareAtPriceV2{
                amount
                currencyCode
              }
              image{
                id
                altText
                originalSrc
                transformedSrc
              }
              selectedOptions{
                name
                value
              }
              product{
                id
                title
                availableForSale
                handle
                description
                descriptionHtml
                images(first:20){
                  edges{
                    node{
                      id
                      altText
                      originalSrc
                      transformedSrc
                    }
                  }
                }
                productType
                options{
                  id
                  name
                  values
                }
              }
            }
          }
        }
      }
    }`;
        const variables = {
            handle: params.slug,
            country: getCountry(context),
            selectedOptions: chosenVariant
        };
        const { productByHandle } = context.extendQuery(customQuery, {
            productByHandle: {
                query: DEFAULT_QUERY,
                variables
            }
        });
        return await context.client.apolloClient.query({
            query: core.gql(productByHandle.query),
            variables: productByHandle.variables
        }).then((result) => {
            const collections = result.data.productByHandle.collections.edges.map((collection => collection.node));
            const images = result.data.productByHandle.images.edges.map((image => image.node));
            const variants = result.data.productByHandle.variants.edges.map((variant => variant.node));
            const newResult = {
                ...result,
                data: {
                    ...result.data,
                    productByHandle: {
                        ...result.data.productByHandle,
                        collections,
                        images,
                        variants
                    }
                }
            };
            return newResult.data.productByHandle;
        }).catch(console.log);
    }
    else if (params.related) {
        // let chosenVariant = [];
        // if (params.selectedOptions && Object.keys(params.selectedOptions).length > 0) {
        //   chosenVariant = Object.entries(params.selectedOptions).map(k => ({ name: k[0], value: k[1] }));
        // }
        // const DEFAULT_QUERY = gql`
        // query @inContext(country: DE){
        //   productRecommendations(productId:"Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0LzUzMjc1NTA2MTE2MTY="){
        //     id
        //     title
        //     handle
        //     options{
        //       name
        //       values
        //     }
        //     collections(first:250){
        //       edges{
        //         node{
        //           title
        //           handle
        //         }
        //       }
        //     }
        //     images(first:20){
        //       edges{
        //         node{
        //           id
        //           altText
        //           originalSrc
        //           transformedSrc
        //         }
        //       }
        //     }
        //     variants(first:20){
        //       edges{
        //         node{
        //           title
        //           weight
        //           availableForSale
        //           sku
        //           priceV2{
        //             amount
        //             currencyCode
        //           }
        //           compareAtPriceV2{
        //             amount
        //             currencyCode
        //           }
        //           image{
        //             id
        //             altText
        //             originalSrc
        //             transformedSrc
        //           }
        //           selectedOptions{
        //             name
        //             value
        //           }
        //           product{
        //             id
        //             title
        //             availableForSale
        //             handle
        //             description
        //             descriptionHtml
        //             images(first:20){
        //               edges{
        //                 node{
        //                   id
        //                   altText
        //                   originalSrc
        //                   transformedSrc
        //                 }
        //               }
        //             }
        //             productType
        //             options{
        //               name
        //               values
        //             }
        //           }
        //         }
        //       }
        //     }
        //   }
        // }`
        // const payload = {
        //   productId: params.id
        // }
        // const { productRecommendations } = context.extendQuery(
        //   customQuery,
        //   {
        //     productRecommendations: {
        //       query: print(DEFAULT_QUERY as any),
        //       payload
        //     }
        //   }
        // )
        // return await context.client.apolloClient.query({
        //   query: gql(productRecommendations.query) as any,
        //   variables: productRecommendations.payload
        // }).then((result) => {
        //   const collections = result.data.productRecommendations.collections.edges.map((collection => collection.node));
        //   const images = result.data.productRecommendations.images.edges.map((image => image.node));
        //   const variants = result.data.productRecommendations.variants.edges.map((variant => variant.node));
        //   delete(result.data.productRecommendations.collections);
        //   delete(result.data.productRecommendations.images);
        //   delete(result.data.productRecommendations.variants);
        //   result.data.productRecommendations = {
        //     ...result.data.productRecommendations,
        //     collections,
        //     images,
        //     variants
        //   };
        //   return result.data.productRecommendations;
        // });
        const getrelatedProductsByIdQuery = context.client.graphQLClient.query((root) => {
            root.add('productRecommendations', { args: { productId: params.productId } }, (relatedProductsById) => {
                // get product basic information
                relatedProductsById.add('id');
                relatedProductsById.add('title');
                relatedProductsById.add('handle');
                relatedProductsById.add('options', {}, (options) => {
                    options.add('name');
                    options.add('values');
                });
                relatedProductsById.addConnection('images', { args: { first: 20 } }, (image) => {
                    image.add('id');
                    image.add('altText');
                    image.add('originalSrc');
                    image.add('transformedSrc');
                });
                relatedProductsById.addConnection('collections', { args: { first: 20 } }, (collection) => {
                    collection.add('title');
                    collection.add('handle');
                });
                relatedProductsById.addConnection('variants', { args: { first: 20 } }, (variants) => {
                    variants.add('title');
                    variants.add('weight');
                    variants.add('availableForSale');
                    variants.add('sku');
                    variants.addField('image', { args: {} }, (image) => {
                        image.add('id');
                        image.add('altText');
                        image.add('originalSrc');
                        image.add('transformedSrc');
                    });
                    variants.addField('selectedOptions', {}, (selectedOptions) => {
                        selectedOptions.add('name');
                        selectedOptions.add('value');
                    });
                    variants.addField('priceV2', {}, (priceV2) => {
                        priceV2.add('currencyCode');
                        priceV2.add('amount');
                    });
                    variants.addField('compareAtPriceV2', {}, (compareAtPriceV2) => {
                        compareAtPriceV2.add('currencyCode');
                        compareAtPriceV2.add('amount');
                    });
                    variants.addField('product', {}, (product) => {
                        product.add('id');
                        product.add('title');
                        product.add('availableForSale');
                        product.add('handle');
                        product.add('description');
                        product.add('descriptionHtml');
                        product.addConnection('images', { args: { first: 20 } }, (images) => {
                            images.add('id');
                            images.add('altText');
                            images.add('originalSrc');
                            images.add('transformedSrc');
                        });
                        product.add('productType');
                        product.addField('options', {}, (options) => {
                            options.add('name');
                            options.add('values');
                        });
                    });
                });
            });
        });
        return context.client.graphQLClient
            .send(getrelatedProductsByIdQuery)
            .then(({ model }) => {
            if (model) {
                return model.productRecommendations;
            }
        });
    }
    else if (params.id) {
        return await context.client.product.fetch(params.id).then((product) => {
            return product;
        });
    }
    else if (params.ids) {
        return await context.client.product.fetchMultiple(params.ids).then((products) => {
            return products;
        });
    }
    else {
        const DEFAULT_QUERY = core.gql `
    query GET_PRODUCTS($country: CountryCode!, $first: Int!, $sortKey:  ProductSortKeys!, $reverse: Boolean!) @inContext(country: $country){
      products(first:$first, sortKey: $sortKey, reverse: $reverse) {
        edges{
          node{
            id
            availableForSale
            createdAt
            updatedAt
            description
            descriptionHtml
            handle
            title
            productType
            vendor
            publishedAt
            onlineStoreUrl
            options{
              id
              name
              values
            }
            images(first:20){
              edges{
                node{
                  altText
                  id
                  originalSrc
                  src
                }
              }
            }
            variants(first:250){
              edges{
                node{
                  sku
                  availableForSale
                  priceV2{
                    currencyCode
                    amount
                  }
                  compareAtPriceV2{
                    amount
                    currencyCode
                  }
                  id
                  image{
                    id
                    altText
                    originalSrc
                    src
                  }
                  selectedOptions{
                    name
                    value
                  }
                }
              }
            }
            priceRange{
              minVariantPrice{
                currencyCode
                amount
              }
              maxVariantPrice{
                currencyCode
                amount
              }
            }
            images(first:20){
              edges{
                node{
                  id
                  originalSrc
                  altText
                }
              }
            }
          }
        }
      } 
    }`;
        const payload = {
            first: (params.limit ? params.limit : 20),
            sortKey: (params.sortBy ? params.sortBy : 'CREATED_AT'),
            reverse: false,
            country: getCountry(context),
        };
        const { products } = context.extendQuery(customQuery, {
            products: {
                query: graphql.print(DEFAULT_QUERY),
                payload
            }
        });
        return await context.client.apolloClient.query({
            query: core.gql(products.query),
            variables: products.payload
        }).then((result) => {
            const items = result.data.products.edges.map(item => {
                const product = {
                    ...item.node,
                    images: item.node.images.edges.map(image => image.node),
                    variants: item.node.variants.edges.map(variant => variant.node)
                };
                return product;
            });
            return items;
        });
    }
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function getCategory(context, params, customQuery) {
    // Use the built-in function
    if (params.slug !== '') {
        return context.client.collection.fetchByHandle(params.slug).then((collection) => {
            // Collection with all default fields
            return collection;
        });
    }
    else {
        return context.client.collection.fetchAll().then((collection) => {
            // Collection with all default fields
            return collection;
        });
    }
}

/* TODO: Fetch custom client directly, may be using context  */
const changePasswordMutation = (context) => {
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    const customer = context.client.graphQLClient.variable('customer', 'CustomerUpdateInput!');
    return context.client.graphQLClient.mutation('customerUpdate', [customerAccessToken, customer], (root) => {
        root.add('customerUpdate', { args: { customerAccessToken, customer } }, (customer) => {
            customer.add('customer', (fields) => {
                fields.add('id');
                fields.add('displayName');
                fields.add('email');
                fields.add('firstName');
                fields.add('lastName');
                fields.add('phone');
            });
            customer.add('customerAccessToken', (token) => {
                token.add('accessToken');
                token.add('expiresAt');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const forgotPasswordMutation = (context) => {
    const email = context.client.graphQLClient.variable('email', 'String!');
    return context.client.graphQLClient.mutation('customerRecover', [email], (root) => {
        root.add('customerRecover', { args: { email } }, (customer) => {
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const customerAddressDeleteMutation = (context) => {
    const id = context.client.graphQLClient.variable('id', 'ID!');
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    return context.client.graphQLClient.mutation('customerAddressDelete', [id, customerAccessToken], (root) => {
        root.add('customerAddressDelete', { args: { id, customerAccessToken } }, (customer) => {
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
            customer.add('deletedCustomerAddressId');
        });
    });
};
const customerAddressAddMutation = (context) => {
    const address = context.client.graphQLClient.variable('address', 'MailingAddressInput!');
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    return context.client.graphQLClient.mutation('customerAddressCreate', [customerAccessToken, address], (root) => {
        root.add('customerAddressCreate', { args: { address, customerAccessToken } }, (customer) => {
            customer.add('customerAddress', (addressInfo) => {
                addressInfo.add('id');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const customerAddressUpdateMutation = (context) => {
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    const id = context.client.graphQLClient.variable('id', 'ID!');
    const address = context.client.graphQLClient.variable('address', 'MailingAddressInput!');
    return context.client.graphQLClient.mutation('customerAddressUpdate', [customerAccessToken, id, address], (root) => {
        root.add('customerAddressUpdate', { args: { address, id, customerAccessToken } }, (customer) => {
            customer.add('customerAddress', (addressInfo) => {
                addressInfo.add('id');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const editProfileMutation = (context) => {
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    const customer = context.client.graphQLClient.variable('customer', 'CustomerUpdateInput!');
    return context.client.graphQLClient.mutation('customerUpdate', [customerAccessToken, customer], (root) => {
        root.add('customerUpdate', { args: { customerAccessToken, customer } }, (customer) => {
            customer.add('customer', (fields) => {
                fields.add('id');
                fields.add('displayName');
                fields.add('email');
                fields.add('firstName');
                fields.add('lastName');
                fields.add('phone');
            });
            customer.add('customerAccessToken', (token) => {
                token.add('accessToken');
                token.add('expiresAt');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const signInMutation = (context) => {
    const input = context.client.graphQLClient.variable('input', 'CustomerAccessTokenCreateInput!');
    return context.client.graphQLClient.mutation('customerAccessTokenCreate', [input], (root) => {
        root.add('customerAccessTokenCreate', { args: { input } }, (customer) => {
            customer.add('customerAccessToken', (token) => {
                token.add('accessToken');
                token.add('expiresAt');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const signOutMutation = (context) => {
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    return context.client.graphQLClient.mutation('customerAccessTokenDelete', [customerAccessToken], (root) => {
        root.add('customerAccessTokenDelete', { args: { customerAccessToken } }, (customer) => {
            customer.add('deletedAccessToken');
            customer.add('deletedCustomerAccessTokenId');
            customer.add('userErrors', (error) => {
                error.add('field');
                error.add('message');
            });
        });
    });
};
const signUpMutation = (context) => {
    const input = context.client.graphQLClient.variable('input', 'CustomerCreateInput!');
    return context.client.graphQLClient.mutation('customerCreate', [input], (root) => {
        root.add('customerCreate', { args: { input } }, (customer) => {
            customer.add('customer', (token) => {
                token.add('id');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function editProfile(context, params) {
    const { token, profile } = params;
    const data = {
        customerAccessToken: token,
        customer: profile
    };
    // send user data to authenticate, return token if valid
    return await context.client.graphQLClient.send(editProfileMutation(context), data).then(({ model }) => {
        return model;
    });
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function getBlogPosts(context, params, customQuery) {
    // Use the built-in function
    const articlesQuery = context.client.graphQLClient.query((root) => {
        root.addConnection('articles', { args: { first: 20 } }, (article) => {
            article.add('title');
            article.add('handle');
            article.add('url');
            article.add('excerpt');
            article.add('publishedAt');
            article.addField('image', {}, (image) => {
                image.add('id');
                image.add('altText');
                image.add('originalSrc');
            });
            article.addField('authorV2', {}, (author) => {
                author.add('name');
                author.add('email');
            });
        });
    });
    // Call the send method with the custom query
    context.client.graphQLClient.send(articlesQuery).then(({ model, articles }) => {
        if (model) {
            return model.articles;
        }
    });
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function getPages(context, params, customQuery) {
    // Use the built-in function
    if (params.slug) {
        const pageByHandleQuery = context.client.graphQLClient.query((root) => {
            root.add('pageByHandle', { args: { handle: params.slug } }, (pageByHandle) => {
                pageByHandle.add('id');
                pageByHandle.add('title');
                pageByHandle.add('handle');
                pageByHandle.add('url');
                pageByHandle.add('bodySummary');
                pageByHandle.add('body');
                pageByHandle.add('createdAt');
            });
        });
        // Call the send method with the custom query
        return context.client.graphQLClient.send(pageByHandleQuery).then(({ model, content }) => {
            return model.pageByHandle;
        });
    }
    else {
        const pagesQuery = context.client.graphQLClient.query((root) => {
            root.addConnection('pages', { args: { first: params.limit ? params.limit : 20 } }, (article) => {
                article.add('id');
                article.add('title');
                article.add('handle');
                article.add('url');
                article.add('bodySummary');
                article.add('body');
                article.add('createdAt');
            });
        });
        // Call the send method with the custom query
        return context.client.graphQLClient.send(pagesQuery).then(({ model, content }) => {
            if (model) {
                return model;
            }
        });
    }
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function updateCart(context, params, _customQuery) {
    const { currentCart, product, quantity } = params;
    // Existing Checkout ID
    const lineItemsToUpdate = [{
            id: product.id,
            quantity
        }];
    const DEFAULT_MUTATION = core.gql `mutation checkoutLineItemsUpdate($country:CountryCode, $checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]! ) @inContext(country:$country){
  checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems){
    checkout{
      appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:250){
          edges{
            node{
              allocationMethod
              targetSelection
              targetType
              value{
                __typename
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
    }
  }`;
    const payload = {
        lineItems: lineItemsToUpdate,
        country: getCountry(context),
        checkoutId: currentCart.id
    };
    const { checkoutLineItemsUpdate } = context.extendQuery(_customQuery, {
        checkoutLineItemsUpdate: {
            mutation: graphql.print(DEFAULT_MUTATION),
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(checkoutLineItemsUpdate.mutation),
        variables: checkoutLineItemsUpdate.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutLineItemsUpdate.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutLineItemsUpdate.checkout.lineItems.edges.map((lineItem => lineItem.node));
        delete (result.data.checkoutLineItemsUpdate.checkout.lineItems);
        delete (result.data.checkoutLineItemsUpdate.checkout.discountApplications);
        result.data.checkoutLineItemsUpdate.checkout = {
            ...result.data.checkoutLineItemsUpdate.checkout,
            discountApplications,
            lineItems
        };
        return result.data.checkoutLineItemsUpdate.checkout;
    });
}

const checkoutMutation = (context) => {
    const input = context.client.graphQLClient.variable('input', 'CheckoutCreateInput!');
    return context.client.graphQLClient.mutation('checkoutCreate', [input], (root) => {
        root.add('checkoutCreate', { args: { input } }, (checkoutObj) => {
            checkoutObj.add('checkout', (checkoutInfo) => {
                checkoutInfo.add('id');
                checkoutInfo.add('webUrl');
            });
            checkoutObj.add('checkoutUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function createCart(context, _params, _customQuery) {
    const data = {
        "input": {
            buyerIdentity: {
                countryCode: (context.res.req.cookies['vsf-locale'] === "en") ? "US" : (context.res.req.cookies['vsf-locale']).toUpperCase()
            }
        }
    };
    // initiate the cart
    return await context.client.graphQLClient.send(checkoutMutation(context), data).then(({ data }) => {
        if (data) {
            return data.checkoutCreate.checkout.id;
        }
    });
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function addToCart(context, params, _customQuery) {
    const { currentCart, product, quantity, customQuery } = params;
    // Items to be add to cart
    const lineItemsToAdd = [{
            variantId: product.variantBySelectedOptions && product.variantBySelectedOptions !== null ? product.variantBySelectedOptions.id : product.variantId,
            quantity,
            customAttributes: customQuery
        }];
    const DEFAULT_MUTATION = core.gql `mutation checkoutLineItemsAdd($country:CountryCode, $checkoutId: ID!, $lineItems: [CheckoutLineItemInput!]! ) @inContext(country:$country){
  checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems){
    checkout{
      appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:250){
          edges{
            node{
              allocationMethod
              targetSelection
              targetType
              value{
                __typename
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
    }
  }`;
    const payload = {
        lineItems: lineItemsToAdd,
        country: getCountry(context),
        checkoutId: currentCart.id
    };
    const { checkoutLineItemsAdd } = context.extendQuery(customQuery, {
        checkoutLineItemsAdd: {
            mutation: graphql.print(DEFAULT_MUTATION),
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(checkoutLineItemsAdd.mutation),
        variables: checkoutLineItemsAdd.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutLineItemsAdd.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutLineItemsAdd.checkout.lineItems.edges.map((lineItem => lineItem.node));
        delete (result.data.checkoutLineItemsAdd.checkout.lineItems);
        delete (result.data.checkoutLineItemsAdd.checkout.discountApplications);
        result.data.checkoutLineItemsAdd.checkout = {
            ...result.data.checkoutLineItemsAdd.checkout,
            discountApplications,
            lineItems
        };
        return result.data.checkoutLineItemsAdd.checkout;
    });
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function removeFromCart(context, params, _customQuery) {
    const { currentCart, product } = params;
    // products to be remove
    const lineItemIdsToRemove = [
        product.id
    ];
    const DEFAULT_MUTATION = core.gql `mutation checkoutLineItemsRemove($country:CountryCode, $checkoutId: ID!, $lineItemIds: [ID!]!) @inContext(country:$country){
  checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds){
    checkout{
      appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:250){
          edges{
            node{
              allocationMethod
              targetSelection
              targetType
              value{
                __typename
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
    }
  }`;
    const payload = {
        lineItemIds: lineItemIdsToRemove,
        country: getCountry(context),
        checkoutId: currentCart.id
    };
    const { checkoutLineItemsRemove } = context.extendQuery(_customQuery, {
        checkoutLineItemsRemove: {
            mutation: graphql.print(DEFAULT_MUTATION),
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(checkoutLineItemsRemove.mutation),
        variables: checkoutLineItemsRemove.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutLineItemsRemove.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutLineItemsRemove.checkout.lineItems.edges.map((lineItem => lineItem.node));
        delete (result.data.checkoutLineItemsRemove.checkout.lineItems);
        delete (result.data.checkoutLineItemsRemove.checkout.discountApplications);
        result.data.checkoutLineItemsRemove.checkout = {
            ...result.data.checkoutLineItemsRemove.checkout,
            discountApplications,
            lineItems
        };
        return result.data.checkoutLineItemsRemove.checkout;
    });
    // Add an item to the checkout
    // return await context.client.checkout.removeLineItems(checkoutID, lineItemIdsToRemove).then((checkout) => checkout);
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function signUp(context, params, customQuery) {
    const data = {
        input: params
    };
    // send userdata to register
    return await context.client.graphQLClient.send(signUpMutation(context), data).then(({ model }) => {
        return model;
    });
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function signIn(context, params, customQuery) {
    const { username, password } = params;
    const data = {
        input: {
            email: username,
            password
        }
    };
    // send user data to authenticate, return token if valid
    return await context.client.graphQLClient.send(signInMutation(context), data).then(({ model }) => {
        return model;
    });
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function signOut(context, params) {
    const data = {
        customerAccessToken: params
    };
    // Remove customer access token
    return await context.client.graphQLClient.send(signOutMutation(context), data).then(({ model }) => {
        return model;
    });
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function changePassword(context, params) {
    const { token, newPassword } = params;
    const data = {
        customerAccessToken: token,
        customer: {
            password: newPassword
        }
    };
    // Remove customer access token
    return await context.client.graphQLClient.send(changePasswordMutation(context), data).then(({ model }) => {
        return model;
    });
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function forgotPassword(context, params) {
    const { username } = params;
    const data = {
        email: username
    };
    // Remove customer access token
    return await context.client.graphQLClient.send(forgotPasswordMutation(context), data);
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function fetchCustomer(context, params, customQuery) {
    const getCustomeInfo = context.client.graphQLClient.query((root) => {
        root.add('customer', { args: { customerAccessToken: params } }, (customerInfo) => {
            customerInfo.add('id');
            customerInfo.add('displayName');
            customerInfo.add('email');
            customerInfo.add('firstName');
            customerInfo.add('lastName');
            customerInfo.add('phone');
            customerInfo.add('tags');
            customerInfo.add('acceptsMarketing');
        });
    });
    // send user data to authenticate, return token if valid
    return context.client.graphQLClient
        .send(getCustomeInfo)
        .then(({ model, product }) => {
        if (model) {
            return model;
        }
    });
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function fetchOrders(context, params, customQuery) {
    const getCustomerOrders = context.client.graphQLClient.query((root) => {
        root.add('customer', { args: { customerAccessToken: params } }, (customerOrder) => {
            customerOrder.addConnection('orders', { args: { first: 20 } }, (order) => {
                order.add('id');
                order.add('name');
                order.add('orderNumber');
                order.add('processedAt');
                order.add('financialStatus');
                order.add('fulfillmentStatus');
                order.addField('currentTotalPrice', {}, (curTotPrice) => {
                    curTotPrice.add('amount');
                    curTotPrice.add('currencyCode');
                });
                order.addField('originalTotalPrice', {}, (originalTotalPrice) => {
                    originalTotalPrice.add('amount');
                    originalTotalPrice.add('currencyCode');
                });
                order.addField('originalTotalDuties', {}, (originalTotalDuties) => {
                    originalTotalDuties.add('amount');
                    originalTotalDuties.add('currencyCode');
                });
                order.addField('currentTotalTax', {}, (curTotTax) => {
                    curTotTax.add('amount');
                    curTotTax.add('currencyCode');
                });
                order.addField('currentSubtotalPrice', {}, (curSubTotPrice) => {
                    curSubTotPrice.add('amount');
                    curSubTotPrice.add('currencyCode');
                });
                order.addConnection('lineItems', { args: { first: 250 } }, (Lineitem) => {
                    Lineitem.add('title');
                    Lineitem.add('quantity');
                    Lineitem.addField('originalTotalPrice', {}, (originaldPrice) => {
                        originaldPrice.add('amount');
                        originaldPrice.add('currencyCode');
                    });
                    Lineitem.addField('variant', {}, (variant) => {
                        variant.add('sku');
                        variant.addField('product', {}, (parentProduct) => {
                            parentProduct.add('id');
                            parentProduct.add('handle');
                        });
                        variant.addField('image', {}, (parentProduct) => {
                            parentProduct.add('altText');
                            parentProduct.add('originalSrc');
                        });
                    });
                });
                order.addField('successfulFulfillments', {}, (trackingInfo) => {
                    trackingInfo.addField('trackingInfo', {}, (tracking) => {
                        tracking.add('number');
                        tracking.add('url');
                    });
                });
                order.addField('shippingAddress', {}, (saddress) => {
                    saddress.add('name');
                    saddress.add('phone');
                    saddress.add('formatted');
                });
                order.addField('totalShippingPriceV2', {}, (TotalShippingPrice) => {
                    TotalShippingPrice.add('amount');
                    TotalShippingPrice.add('currencyCode');
                });
            });
        });
    });
    return context.client.graphQLClient
        .send(getCustomerOrders)
        .then(({ model, product }) => {
        if (model) {
            return model;
        }
    });
}

/* eslint-disable func-names */
const addressesQuery = (pages, token, context) => {
    return context.client.graphQLClient.query((root) => {
        root.add('customer', {
            args: {
                customerAccessToken: token
            }
        }, (customer) => {
            customer.add('id');
            customer.addConnection('addresses', { args: { first: 10 } }, function (address) {
                address.add('address1');
                address.add('address2');
                address.add('city');
                address.add('company');
                address.add('firstName');
                address.add('lastName');
                address.add('name');
                address.add('phone');
                address.add('country');
                address.add('province');
                address.add('provinceCode');
                address.add('zip');
                address.add('formattedArea');
            });
        });
    });
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function fetchAddresses(context, params, customQuery) {
    // send user data to authenticate, return token if valid
    const addresses = await context.client.graphQLClient.send(addressesQuery(10, params, context)).then(({ model }) => {
        if (model) {
            return model.customer;
        }
    });
    return addresses;
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function deleteAddress(context, params) {
    const { token, AddressId } = params;
    const data = {
        id: AddressId,
        customerAccessToken: token
    };
    const deletedAddressId = await context.client.graphQLClient.send(customerAddressDeleteMutation(context), data).then(({ model }) => {
        if (model) {
            return model.customerAddressDelete;
        }
    });
    return deletedAddressId;
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function addAddress(context, params) {
    const { token, address } = params;
    const data = {
        address,
        customerAccessToken: token
    };
    const addedAddressId = await context.client.graphQLClient.send(customerAddressAddMutation(context), data).then(({ model }) => {
        if (model) {
            return model.customerAddressCreate;
        }
    });
    return addedAddressId;
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function updateAddress(context, params) {
    const { token, AddressId, address } = params;
    const data = {
        id: AddressId,
        address,
        customerAccessToken: token
    };
    const updatedAddressId = await context.client.graphQLClient.send(customerAddressUpdateMutation(context), data).then(({ model }) => {
        if (model) {
            return model.customerAddressUpdate;
        }
    });
    return updatedAddressId;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function checkOut(context, checkoutId, customQuery) {
    const DEFAULT_QUERY = `
  query FETCH_CHECKOUT($country: CountryCode!, $id: ID!) @inContext(country: $country ) {
    node(id: $id) {
      id
      ... on Checkout {
        appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:20){
          edges{
            node{
              value{
                ... on MoneyV2{
                  amount
                  currencyCode
                }
                ... on PricingPercentageValue{
                  percentage
                }
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
      }
    }`;
    const payload = {
        id: checkoutId,
        country: getCountry(context),
    };
    const { node } = context.extendQuery(customQuery, {
        node: {
            query: DEFAULT_QUERY,
            variables: payload
        }
    });
    return await context.client.apolloClient.query({
        query: core.gql(node.query),
        variables: node.variables
    }).then((result) => {
        const discountApplications = result.data.node.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.node.lineItems.edges.map((lineItem => lineItem.node));
        const newResult = {
            ...result,
            data: {
                ...result.data,
                node: {
                    ...result.data.node,
                    discountApplications,
                    lineItems
                }
            }
        };
        return newResult.data.node;
    });
}

const CustomClient = require('shopify-buy/index.unoptimized.umd.min.js');
const defaultSettings = {};
const cookies = {
    cartCookieName: 'vsf-cart'
};
const onCreate = (settings) => {
    const client = CustomClient.buildClient(settings.api);
    client.apolloClient = shopifyApollo.createShopifyApollo(settings);
    return ({
        config: {
            ...defaultSettings,
            ...settings
        },
        client,
        cookies: (settings.api).cookies || cookies
    });
};
const { createApiClient } = core$1.apiClientFactory({
    onCreate,
    api: {
        getProduct,
        getCategory,
        getBlogPosts,
        getPages,
        editProfile,
        addToCart,
        updateCart,
        removeFromCart,
        signUp,
        signIn,
        signOut,
        changePassword,
        forgotPassword,
        fetchCustomer,
        fetchOrders,
        fetchAddresses,
        deleteAddress,
        addAddress,
        updateAddress,
        createCart,
        checkOut,
        cookies,
        ...shopifyApollo.getShopifyApolloAPIs()
    }
});

exports.createApiClient = createApiClient;
//# sourceMappingURL=index.js.map
